############################################################
#GENERAL SETTINGS
############################################################

# enable special debub() logging function for further messsages
# notice: on big networks this can affect the performance
debug=false
logfile=10k.log
# due to threading, this value does not guarantee determininistic behavior (e.g. replicable sims)
seed=1
# limits the number of possible number threads managing the varius network events
# it should be lower than your machine "ulimit -u" output
max_threads=3000

############################################################
# LN settings
############################################################
to_self_delay=20
#number of confirmation to assume channel funding confirmed
minimum_depth=6
# how many times(hops) each p2p messages can be forwarded
p2p_max_hops=2
# number of blocks after which p2p messages are considered obsolete
p2p_max_age=4
# max number of p2p gossip messages processed at each p2p call
gossip_flush_size=500

############################################################
# SIMULATION Time settings
############################################################
# These affect how timechain related events are mapped into thread simulation events.
# all times are in msec

# IMPORTANT: These should ALWAYS be modified in coherence with eath other:
# e.g., reducing the blocktime to make a "faster" sim but leaving the p2p period unchanged,
# --> it's indirectly choosing of having less frequent periodic p2p method calls

# taken from: https://github.com/lightning/bolts/blob/master/07-routing-gossip.md#initial-sync
# "...SHOULD flush outgoing gossip messages once every 60 seconds..." (notice: blocks are 600 sec real world time)
# Thus, according to BOLT standard suggestions, p2p period should be around 1/10 of blocktime
blocktime_ms=100
p2p_period_ms=10

############################################################
#BOOTSTRAP SETTINGS
############################################################
#Used when bootstrapping a network from scratch,e.g. instead of loading a pre-existing topology

#number of nodes to be bootstrapped
bootstrap_nodes=10000
#range of initial blocks during while each node can be bootstrapped
# for bigger networks (>1k nodes) 1000 blocks periods or more are reccomended
bootstrap_blocks=1000

#these values are computed as fraction of the total bootstrap period
#e.g., 0.3 median with a 100 bootstrap period -> 50% of the nodes will be started in the first 30 blocks
bootstrap_time_median=0.5
bootstrap_time_mean=0.5
############################################################
# CUSTOM NODE PROFILES
############################################################
# You can define different node profiles to be used when bootstrapping
# The format is: profile.PROFILE_NAME.ATTRIBUTE
# Each profile is chosen with a specific 0..1 probability
# The profile "default" is the only required, chosen whenever no other is selected

#-------------------------------------------------------------------
profile.small.prob=0.6
#range of initial onchain funding
profile.small.min_funding=50000
profile.small.max_funding=10000000

#range of number of channels each node tries to open when bootstrapping
profile.small.min_channels=1
profile.small.max_channels=10

# sizes of the channels opened
profile.small.min_channel_size=10000
profile.small.max_channel_size=10000000
profile.small.median_channel_size =1000000
profile.small.mean_channel_size =1000000

profile.small.min_ppm_fee =0
profile.small.max_ppm_fee =1000
profile.small.median_ppm_fee = 200
profile.small.mean_ppm_fee = 100
#-------------------------------------------------------------------
profile.medium.prob=0.3
#range of initial onchain funding
profile.medium.min_funding=10000000
profile.medium.max_funding=100000000

#number of channels each node tries to open when bootstrapping
profile.medium.min_channels=10
profile.medium.max_channels=100

# sizes of the channels opened
profile.medium.min_channel_size=1000000
profile.medium.max_channel_size=10000000
profile.medium.median_channel_size =5000000
profile.medium.mean_channel_size =5000000

profile.medium.min_ppm_fee =0
profile.medium.max_ppm_fee =1000
profile.medium.median_ppm_fee = 200
profile.medium.mean_ppm_fee = 100
#-------------------------------------------------------------------
profile.hub.prob=0.1
#range of initial onchain funding
profile.hub.min_funding=100000000
profile.hub.max_funding=500000000

#number of channels each node tries to open when bootstrapping
profile.hub.min_channels=100
profile.hub.max_channels=500

# sizes of the channels opened
profile.hub.min_channel_size=1000000
profile.hub.max_channel_size=100000000
profile.hub.median_channel_size =5000000
profile.hub.mean_channel_size =10000000

profile.hub.min_ppm_fee =0
profile.hub.max_ppm_fee =1000
profile.hub.median_ppm_fee = 200
profile.hub.mean_ppm_fee = 100

# Default profile is used to cover the remaining probability not allocated to profiles
#range of initial onchain funding
profile.default.min_funding=10000000
profile.default.max_funding=20000000

profile.default.min_channels=5
profile.default.max_channels=20

profile.default.min_channel_size=500000
profile.default.max_channel_size=5000000
profile.default.median_channel_size = 2000000
profile.default.mean_channel_size = 2000000

profile.default.min_ppm_fee =0
profile.default.max_ppm_fee =1000
profile.default.median_ppm_fee = 200
profile.default.mean_ppm_fee = 100

## Multival attributes

# Fees - specified as a set of typical value that can be used in nodes.
# useful if you want just to choose some random value without having an excessively fine granularity of values
# e.g., it might not have sense to differentiate nodes with similar fees as 400, 398, 403, 407
# Notice: base fees are expressed in millisats
base_fee_set = 0,100,1000
ppm_fee_set = 0,10,50,100,200,500,1000

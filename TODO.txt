Notes:

- all LN prefixed components are directly mapped to LN protocol (messages, elements)
- action that could be taken only admin of the component, should be not be exposed from LN but UV.
 example: update policy for a channel, should not be a commonly available LN method



- node1 node2 order should only reflect the alphabetical order, not initiator
- implement the update channel message for fees and lock delta

- channel confirmation delay, also similar blockchain related events
- importing real topology (e.g. lncli describegraph)
- profiles in properties
- initial_routing_sync to query for past gossip:
https://github.com/lightning/bolts/blob/master/07-routing-gossip.md#initial-sync

lncli describegraph > graph.json

cat graph.json | grep "pub_key" | wc -l
16184
cat graph.json | grep "channel_id" | wc -l
76347

DONE
- set a proper gossip propagation policy (stop after hops? periodically broadcast from thread?)
- saving state
- deterministic random in nodes
note: warmup, but in general, starting time of bootstrap creates a race condition on which p2p message will be received
for example: node x opens a channel, announce to peers, but peers that opened the channel towwards x will be
in the list only if their channel has been opened from their side, which depend on bootstrap timing
- restart uvm network


DEBUG:

with breakpoint on server function wait(END_DATA) does not work on client

ROUTE

03aab7e9327716ee946b8fbfae039b0db85356549e72c5cca113ea67893d0821e5 (river)
03740f82191202480ace717fcdf00f71a8b1eb9bdc2bb5e2106cd0ab5cb4d7a54e
0298f6074a454a1f5345cb2a7c6f9fce206cd0bf675d177cdbf0ca7508dd28852f (bcash
033dee9c6a0afc40ffd8f27d68ef260f3e5e1c19e59c6f9bb607fb04c1d497a809 (yoda)


On long processes (e.g. after routing correctly waiting for Future) there is a loss of connection client/server, but invisible
Always empty response, even if received
(e.g. try show network, why it remains stuck?

